from mcp.server.fastmcp import FastMCP
from langgraph.types import Command
from openai import OpenAI
from dotenv import load_dotenv
from pydantic_ai import Agent
from pydantic_ai.mcp import MCPServerStdio
from jinja2 import Template
import psycopg2
import json
import asyncio


load_dotenv()
mcp = FastMCP("mothership")

def swarm_handoff():
    # cannot handoff to another node because I cannto adapt the graph
    ...

@mcp.tool()
async def call_to_mothership(tasks: list[str]) -> str:
    """
    Dynamically sets up another agent based on a list of tasks that an LLM alone cannot accomplish without external tool usage. Each task is described in natural language, containing all relevant details such as the specific capabilities required, the desired outcome, and any contextual information or constraints that influence tool selection. These rich, descriptive task formulations enable an accurate vector search through RAG to identify the most suitable tools. Once retrieved, the agent is equipped with the complete set of tools necessary to accomplish the tasks effectively.

    Args:
        tasks: A list of detailed natural language task descriptions. Each description should clearly explain what needs to be achieved, what tools or capabilities are expected, the context of the task, and any relevant constraints or considerations.

    Returns:
        The outcomes generated by the dynamically configured agent after executing the tasks with the retrieved tools.
        
    """

    client = OpenAI()
    conn = psycopg2.connect("dbname=toolnamestore user=chris password=1234 host=localhost port=5433")
    cur = conn.cursor()

    toollist = {}
    for task in tasks:
        # retrieve the tool
        response = client.embeddings.create(
                input = task,
                model = "text-embedding-3-small"
                )
        embedding = response.data[0].embedding
        cur.execute("""
                    SELECT name, config, description, embedding <=> %s::vector AS distance
                    FROM items
                    ORDER BY distance
                    LIMIT 4;
                    """, (embedding,))
        # i need to make a decision here
        rows = cur.fetchall()
        evaluation_instruction_template = Template("""You are a evaluater that gets told a task and the description of a tool. evaluate weather the tool with the {{description}} is really the right choise for the task: {{task}}. awnser with just a conceice 'yes' or 'no'""")
        evaluation_drone = Agent(model="openai:gpt-4o")
        for row in rows:
            name, config, description, _= row
            evaluation_prompt = evaluation_instruction_template.render(description=description, task=task)
            response = await evaluation_drone.run(evaluation_prompt)
            if "yes" in response.data:
                if name not in toollist.keys():
                    toollist[name] = json.loads(config)
    # bind tool to a new agent
    weaponary = []
    for tool in toollist.values():
        weapon = MCPServerStdio(
                command = tool["command"],
                args = tool["args"]
                )
        weaponary.append(weapon)
    drone = Agent(
            model="anthropic:claude-3-7-sonnet-latest",
            mcp_servers=weaponary
            )

    # prompt the new agent
    instruction_template = Template("""You are a tool equiped expert. Help the user solving the following set of tasks: 
    {% for task in tasks %}
    - {{ task }}
    {% endfor %}
    """)
    instruction = instruction_template.render(tasks=tasks)
    print(instruction)

    async with drone.run_mcp_servers():
        response = await drone.run(instruction)

    # return the results
    return response.data

    # i do need to create a agend in here compiled with tools etc

if __name__ == "__main__":
    mcp.run()

#     asyncio.run(call_to_mothership([
#   "Search the web for comprehensive information about MCP marketplaces, including what they are, major examples, and their significance in the market",
#   "Get the current time in Frankfurt, Germany",
#   "Compile a comprehensive list of information about MCP marketplaces and include the current time in Frankfurt at the top of the list"
# ]))
