"A basic implementation of persistent memory using a local knowledge graph. This lets Claude remember information about the user across chats.\ncreate_entities\nCreate multiple new entities in the knowledge graph\nInput: \nentities\n (array of objects)\nEach object contains:\nname\n (string): Entity identifier\nentityType\n (string): Type classification\nobservations\n (string[]): Associated observations\nIgnores entities with existing names\ncreate_relations\nCreate multiple new relations between entities\nInput: \nrelations\n (array of objects)\nEach object contains:\nfrom\n (string): Source entity name\nto\n (string): Target entity name\nrelationType\n (string): Relationship type in active voice\nSkips duplicate relations\nadd_observations\nAdd new observations to existing entities\nInput: \nobservations\n (array of objects)\nEach object contains:\nentityName\n (string): Target entity\ncontents\n (string[]): New observations to add\nReturns added observations per entity\nFails if entity doesn't exist\ndelete_entities\nRemove entities and their relations\nInput: \nentityNames\n (string[])\nCascading deletion of associated relations\nSilent operation if entity doesn't exist\ndelete_observations\nRemove specific observations from entities\nInput: \ndeletions\n (array of objects)\nEach object contains:\nentityName\n (string): Target entity\nobservations\n (string[]): Observations to remove\nSilent operation if observation doesn't exist\ndelete_relations\nRemove specific relations from the graph\nInput: \nrelations\n (array of objects)\nEach object contains:\nfrom\n (string): Source entity name\nto\n (string): Target entity name\nrelationType\n (string): Relationship type\nSilent operation if relation doesn't exist\nread_graph\nRead the entire knowledge graph\nNo input required\nReturns complete graph structure with all entities and relations\nsearch_nodes\nSearch for nodes based on query\nInput: \nquery\n (string)\nSearches across:\nEntity names\nEntity types\nObservation content\nReturns matching entities and their relations\nopen_nodes\nRetrieve specific nodes by name\nInput: \nnames\n (string[])\nReturns:\nRequested entities\nRelations between requested entities\nSilently skips non-existent nodes\n"